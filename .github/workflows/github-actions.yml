#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: "*"
  pull_request_target:
    branches: "*"

jobs:

  build:
    name: ${{ matrix.os }} - Go ${{ matrix.go_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      # If you want to matrix build , you can append the following list.
      matrix:
        go_version:
          - 1.15
          - 1.14
        os:
          - ubuntu-latest

    # https://docs.github.com/cn/actions/reference/encrypted-secrets
    env:
      DING_TOKEN: ${{ secrets.PROXY_DING_TOKEN }}
      DING_SIGN: ${{ secrets.PROXY_DING_SIGN }}

    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Check License Header
        uses: apache/skywalking-eyes@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          # Cache
          path: ~/go/pkg/mod
          # Cache key
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          else
              go get -v -t -d ./...
          fi

      - name: Go Fmt
        run: go fmt ./... && [[ -z `git status -s` ]]

      - name: Install go ci lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.27.0

      - name: Run Linter
        run: golangci-lint run --timeout=10m -v --disable-all --enable=govet --enable=staticcheck --enable=ineffassign --enable=misspell

      - name: Go Test
        run: |
          chmod u+x before_ut.sh && ./before_ut.sh
          go mod vendor && go test ./pkg/... -coverprofile=coverage.txt -covermode=atomic
      # integration test
      - name: Integration Test
        run: |
          chmod +x start_integrate_test.sh && chmod +x integrate_test.sh && ./start_integrate_test.sh

      - name: Coverage
        run: bash <(curl -s https://codecov.io/bash)

      - name: Hello world
        run: echo Hello world ${{ secrets.PROXY_DING_TOKEN }} ${{ secrets.PROXY_DING_SIGN }}

        # Because the contexts of push and PR are different, there are two Notify.
        # Notifications are triggered only in the dubbogo/dubbo-go-pixiu repository.
      - name: DingTalk Message Notify only Push
        uses: ./.github/actions/actions-ding
        # Whether job is successful or not, always () is always true.
        if: |
          always() &&
          github.event_name == 'push' &&
          github.repository == 'dubbogo/dubbo-go-proxy'
        with:
          # DingDing bot token
          dingToken: ${{ env.DING_TOKEN }}
          secret: ${{ env.DING_SIGN }}
          # Post Body to send
          body: |
            {
              "msgtype": "markdown",
              "markdown": {
                  "title": "Github Actions",
                  "text": "## Github Actions \n - name: CI \n - repository: ${{ github.repository }} \n - trigger: ${{ github.actor }} \n - event: ${{ github.event_name }} \n - ref: ${{ github.ref }} \n - status: [${{ job.status	}}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) \n - environment: ${{ runner.os }} \n - SHA: [${{ github.sha }}](${{ github.event.compare }})"
              }
            }

      - name: DingTalk Message Notify only PR
        uses: ./.github/actions/actions-ding
        if: |
          always() &&
          github.event_name == 'pull_request_target' &&
          github.repository == 'dubbogo/dubbo-go-proxy'
        with:
          dingToken: ${{ env.DING_TOKEN }}
          secret: ${{ env.DING_SIGN }}
          body: |
            {
              "msgtype": "markdown",
              "markdown": {
                  "title": "Github Actions",
                  "text": "## Github Actions \n - name: CI \n - repository: ${{ github.repository }} \n - pr_title: ${{ github.event.pull_request.title }} \n - trigger: ${{ github.actor }} \n - event: ${{ github.event_name }} \n - ref: [${{ github.ref }}](${{ github.event.pull_request._links.html.href }}) \n - status: [${{ job.status	}}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) \n - environment: ${{ runner.os }} \n > SHA: [${{ github.sha }}](${{ github.event.pull_request._links.html.href }})"
              }
            }
